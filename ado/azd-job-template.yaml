apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/instance: azdevops
    app.kubernetes.io/name: azdevops
  name: azdevops
---
apiVersion: v1
kind: Secret
metadata:
  name: azdevops
  namespace: azdevops
data:
  AZP_TOKEN: {{AZP_TOKEN}}
---
apiVersion: keda.sh/v1alpha1
kind: ScaledJob
metadata:
  name: azdevops-scaledjob
  namespace: azdevops
spec:
  jobTargetRef:
    template:
      spec:
        containers:
        - name: azdevops-agent-job
          image: localhost:5001/azp-agent:{{SCALE_TYPE}}
          imagePullPolicy: Always
          env:
          - name: AZP_URL
            value: "{{AZP_URL}}"
          - name: AZP_TOKEN
            valueFrom:
              secretKeyRef:
                name: azdevops
                key: AZP_TOKEN
          - name: AZP_POOL
            value: "{{AZP_POOL}}"
          - name: PLACEHOLDER_AGENT
            value: "false"
          volumeMounts:
          - mountPath: /var/run/docker.sock
            name: docker-volume
        volumes:
        - name: docker-volume
          hostPath:
            path: /var/run/docker.sock
  pollingInterval: 30
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 5
  maxReplicaCount: 10   
  scalingStrategy:
    strategy: "default"               
  triggers:
  - type: azure-pipelines
    metadata:
      poolID: "{{POOL_ID}}"
      organizationURLFromEnv: "AZP_URL"
      personalAccessTokenFromEnv: "AZP_TOKEN"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: azdevops-placeholder-agent
  namespace: azdevops
spec:
  template:
    metadata:

    spec:
      containers:
      - name: azdevops-placeholder-register
        image: localhost:5001/azp-agent:{{SCALE_TYPE}}
        imagePullPolicy: Always
        env:
        - name: AZP_URL
          value: "{{AZP_URL}}"
        - name: AZP_TOKEN
          valueFrom:
            secretKeyRef:
              name: azdevops
              key: AZP_TOKEN
        - name: AZP_POOL
          value: "{{AZP_POOL}}"
        - name: PLACEHOLDER_AGENT
          value: "true"
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-volume
      volumes:
      - name: docker-volume
        hostPath:
          path: /var/run/docker.sock
      restartPolicy: OnFailure